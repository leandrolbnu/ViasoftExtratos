unit ViasoftController;

interface

uses
  System.Generics.Collections,
  Vcl.Dialogs,
  Math,
  ViasoftModel,
  Transacao;

type
  TViasoftController = class
  private
    FModel: TViasoftModel;
  public
    constructor Create;
    destructor Destroy; override;

    procedure UpdateModelTipo(const ATipo: string);
    function RetrieveModelTipo: string;

    procedure UpdateModelValor(const AValor: double);
    function RetrieveModelValor: double;

    procedure AdicionarTransacao(ATransacao: TTransacao; var ATransacoes: TList<TTransacao>);
    procedure EditarTransacao(Index: Integer; ATransacao: TTransacao; var ATransacoes: TList<TTransacao>);
    procedure RemoverTransacao(Index: Integer; var ATransacoes: TList<TTransacao>);
  end;

implementation

constructor TViasoftController.Create;
begin
  FModel := TViasoftModel.Create;
end;

destructor TViasoftController.Destroy;
begin
  FModel.Free;
  inherited;
end;

//=====//====//=====//====//=====//====//=====//====//=====//====//=====//====//=====//====//=====//====//=====//====

procedure TViasoftController.AdicionarTransacao(ATransacao: TTransacao; var ATransacoes: TList<TTransacao>);
begin
  FModel.AdicionarTransacao(ATransacao, ATransacoes);
end;

procedure TViasoftController.EditarTransacao(Index: Integer; ATransacao: TTransacao; var ATransacoes: TList<TTransacao>);
begin
  FModel.EditarTransacao(Index, ATransacao, ATransacoes);
end;

procedure TViasoftController.RemoverTransacao(Index: Integer; var ATransacoes: TList<TTransacao>);
begin
  if Index >= ZeroValue then
    FModel.RemoverTransacao(Index, ATransacoes)
  else
    MessageDlg('Nenhum registro selecionado. Selecione um registro', TMsgDlgType.mtInformation, [mbOk], 0);
end;

//=====//====//=====//====//=====//====//=====//====//=====//====//=====//====//=====//====//=====//====//=====//====

procedure TViasoftController.UpdateModelTipo(const ATipo: string);
begin
  FModel.SetTipo(ATipo); // Atualiza o Tipo no Model
end;

function TViasoftController.RetrieveModelTipo: string;
begin
  Result := FModel.GetTipo; // Retorna o Tipo do Model
end;

procedure TViasoftController.UpdateModelValor(const AValor: double);
begin
  FModel.SetValor(AValor); // Atualiza o Valor no Model
end;

function TViasoftController.RetrieveModelValor: double;
begin
  Result := FModel.GetValor; // Retorna o Valor do Model
end;

end.

